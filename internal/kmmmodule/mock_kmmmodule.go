// Code generated by MockGen. DO NOT EDIT.
// Source: kmmmodule.go
//
// Generated by this command:
//
//	mockgen -source=kmmmodule.go -package=kmmmodule -destination=mock_kmmmodule.go KMMModuleAPI
//
// Package kmmmodule is a generated GoMock package.
package kmmmodule

import (
	reflect "reflect"

	v1beta1 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta1"
	v1alpha1 "github.com/yevgeny-shnaidman/amd-gpu-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockKMMModuleAPI is a mock of KMMModuleAPI interface.
type MockKMMModuleAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKMMModuleAPIMockRecorder
}

// MockKMMModuleAPIMockRecorder is the mock recorder for MockKMMModuleAPI.
type MockKMMModuleAPIMockRecorder struct {
	mock *MockKMMModuleAPI
}

// NewMockKMMModuleAPI creates a new mock instance.
func NewMockKMMModuleAPI(ctrl *gomock.Controller) *MockKMMModuleAPI {
	mock := &MockKMMModuleAPI{ctrl: ctrl}
	mock.recorder = &MockKMMModuleAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKMMModuleAPI) EXPECT() *MockKMMModuleAPIMockRecorder {
	return m.recorder
}

// SetBuildConfigMapAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetBuildConfigMapAsDesired(buildCM *v1.ConfigMap, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBuildConfigMapAsDesired", buildCM, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBuildConfigMapAsDesired indicates an expected call of SetBuildConfigMapAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetBuildConfigMapAsDesired(buildCM, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuildConfigMapAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetBuildConfigMapAsDesired), buildCM, devConfig)
}

// SetKMMModuleAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetKMMModuleAsDesired(mod *v1beta1.Module, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKMMModuleAsDesired", mod, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKMMModuleAsDesired indicates an expected call of SetKMMModuleAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetKMMModuleAsDesired(mod, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKMMModuleAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetKMMModuleAsDesired), mod, devConfig)
}
