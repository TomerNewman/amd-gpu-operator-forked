---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: gpuenablements.gpue.openshift.io
spec:
  group: gpue.openshift.io
  names:
    kind: GPUEnablement
    listKind: GPUEnablementList
    plural: gpuenablements
    shortNames:
    - gpue
    singular: gpuenablement
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GPUConfig describes how to enable AMD GPU device
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GPUEnablementSpec describes how the AMD GPU operator should
              enable AMD GPU device for customer's use.
            properties:
              devicePluginImage:
                description: device plugin image
                type: string
              driversConfig:
                description: defines configuration for kernel modules/drivers need
                  by the operator
                properties:
                  build:
                    description: Build contains build instructions.
                    properties:
                      baseImageRegistryTLS:
                        description: BaseImageRegistryTLS contains settings determining
                          how to access registries of the base images in the build-process'
                          Dockerfile.
                        properties:
                          insecure:
                            description: If Insecure is true, the operator will be
                              able to access a registry in an insecure (plain HTTP)
                              protocol.
                            type: boolean
                          insecureSkipTLSVerify:
                            description: If InsecureSkipTLSVerify, the operator will
                              accept any certificate provided by the registry.
                            type: boolean
                        type: object
                      buildArgs:
                        description: BuildArgs is an array of build variables that
                          are provided to the image building backend.
                        items:
                          description: BuildArg represents a build argument used when
                            building a container image.
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                      dockerfileConfigMap:
                        description: ConfigMap that holds Dockerfile contents
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      kanikoParams:
                        description: KanikoParams is used to customize the building
                          process of the image.
                        properties:
                          tag:
                            description: Kaniko image tag to use when creating the
                              build Job
                            type: string
                        type: object
                      secrets:
                        description: Secrets is an optional list of secrets to be
                          made available to the build system. Those secrets should
                          be used for private resources such as a private Github repo.
                          For container registries auth use module.spec.imagePullSecret
                          instead.
                        items:
                          description: LocalObjectReference contains enough information
                            to let you locate the referenced object inside the same
                            namespace.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                      selector:
                        additionalProperties:
                          type: string
                        description: Selector describes on which nodes will run the
                          building process.
                        type: object
                    required:
                    - dockerfileConfigMap
                    type: object
                  containerImage:
                    description: ContainerImage is a top-level field
                    type: string
                  imagePullPolicy:
                    description: 'Image pull policy. One of Always, Never, IfNotPresent.
                      Defaults to Always if :latest tag is specified, or IfNotPresent
                      otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                    type: string
                  inTreeModuleToRemove:
                    description: InTreeModuleToRemove specifies the in-tree kernel
                      module that should be removed (if present) before loading the
                      kernel module from the ContainerImage
                    type: string
                  kernelMappings:
                    description: KernelMappings is a list of kernel mappings. When
                      a node's labels match Selector, then the KMM Operator will look
                      for the first mapping that matches its kernel version, and use
                      the corresponding container image to run the DriverContainer.
                    items:
                      description: KernelMapping pairs kernel versions with a DriverContainer
                        image. Kernel versions can be matched literally or using a
                        regular expression.
                      properties:
                        build:
                          description: Build enables in-cluster builds for this mapping
                            and allows overriding the Module's build settings.
                          properties:
                            baseImageRegistryTLS:
                              description: BaseImageRegistryTLS contains settings
                                determining how to access registries of the base images
                                in the build-process' Dockerfile.
                              properties:
                                insecure:
                                  description: If Insecure is true, the operator will
                                    be able to access a registry in an insecure (plain
                                    HTTP) protocol.
                                  type: boolean
                                insecureSkipTLSVerify:
                                  description: If InsecureSkipTLSVerify, the operator
                                    will accept any certificate provided by the registry.
                                  type: boolean
                              type: object
                            buildArgs:
                              description: BuildArgs is an array of build variables
                                that are provided to the image building backend.
                              items:
                                description: BuildArg represents a build argument
                                  used when building a container image.
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              type: array
                            dockerfileConfigMap:
                              description: ConfigMap that holds Dockerfile contents
                              properties:
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            kanikoParams:
                              description: KanikoParams is used to customize the building
                                process of the image.
                              properties:
                                tag:
                                  description: Kaniko image tag to use when creating
                                    the build Job
                                  type: string
                              type: object
                            secrets:
                              description: Secrets is an optional list of secrets
                                to be made available to the build system. Those secrets
                                should be used for private resources such as a private
                                Github repo. For container registries auth use module.spec.imagePullSecret
                                instead.
                              items:
                                description: LocalObjectReference contains enough
                                  information to let you locate the referenced object
                                  inside the same namespace.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              type: array
                            selector:
                              additionalProperties:
                                type: string
                              description: Selector describes on which nodes will
                                run the building process.
                              type: object
                          required:
                          - dockerfileConfigMap
                          type: object
                        containerImage:
                          description: ContainerImage is the name of the DriverContainer
                            image that should be used to deploy the module.
                          type: string
                        inTreeModuleToRemove:
                          description: InTreeModuleToRemove specifies the in-tree
                            kernel module that should be removed (if present) before
                            loading the kernel module from the ContainerImage
                          type: string
                        literal:
                          description: Literal defines a literal target kernel version
                            to be matched exactly against node kernels.
                          type: string
                        regexp:
                          description: Regexp is a regular expression to be match
                            against node kernels.
                          type: string
                        registryTLS:
                          description: RegistryTLS set the TLS configs for accessing
                            the registry of the module-loader's image.
                          properties:
                            insecure:
                              description: If Insecure is true, the operator will
                                be able to access a registry in an insecure (plain
                                HTTP) protocol.
                              type: boolean
                            insecureSkipTLSVerify:
                              description: If InsecureSkipTLSVerify, the operator
                                will accept any certificate provided by the registry.
                              type: boolean
                          type: object
                        sign:
                          description: Sign enables in-cluster signing for this mapping
                          properties:
                            certSecret:
                              description: a secret containing the public key used
                                to sign kernel modules for secureboot
                              properties:
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            filesToSign:
                              description: paths inside the image for the kernel modules
                                to sign (if ommited all kmods are signed)
                              items:
                                type: string
                              type: array
                            keySecret:
                              description: a secret containing the private key used
                                to sign kernel modules for secureboot
                              properties:
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            unsignedImage:
                              description: Image to sign, ignored if a Build is present,
                                required otherwise
                              type: string
                            unsignedImageRegistryTLS:
                              description: UnsignedImageRegistryTLS contains settings
                                determining how to access registries of the unsigned
                                image.
                              properties:
                                insecure:
                                  description: If Insecure is true, the operator will
                                    be able to access a registry in an insecure (plain
                                    HTTP) protocol.
                                  type: boolean
                                insecureSkipTLSVerify:
                                  description: If InsecureSkipTLSVerify, the operator
                                    will accept any certificate provided by the registry.
                                  type: boolean
                              type: object
                          required:
                          - certSecret
                          - keySecret
                          type: object
                      required:
                      - containerImage
                      type: object
                    minItems: 1
                    type: array
                  modprobe:
                    description: Modprobe is a set of properties to customize which
                      module modprobe loads and with which properties.
                    properties:
                      args:
                        description: 'Args is an optional list of arguments to be
                          passed to modprobe before the name of the kernel module.
                          The resulting commands will be: `modprobe ${Args} module_name`.'
                        properties:
                          load:
                            description: Load is an optional list of arguments to
                              be used when loading the kernel module.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          unload:
                            description: Unload is an optional list of arguments to
                              be used when unloading the kernel module.
                            items:
                              type: string
                            minItems: 1
                            type: array
                        type: object
                      dirName:
                        default: /opt
                        description: DirName is the root directory for modules. It
                          adds `-d ${DirName}` to the modprobe command-line.
                        type: string
                      firmwarePath:
                        description: FirmwarePath is the path of the firmware(s).
                          The firmware(s) will be copied to the host for the kernel
                          to find them.
                        type: string
                      moduleName:
                        description: ModuleName is the name of the Module to be loaded.
                        type: string
                      modulesLoadingOrder:
                        description: 'ModulesLoadingOrder defines the dependency between
                          kernel modules loading, in case it was not created by depmod
                          (independent kernel modules). The list order should be:
                          upmost module, then the module it depends on and so on.
                          Example: if moduleA depends on first loading moduleB, and
                          moduleB depends on first loading moduleC the entry should
                          look: ModulesLoadingOrder: - moduleA - moduleB - moduleC
                          In order to load all 3 modules, moduleA shoud be defined
                          in the ModuleName parameter of this struct'
                        items:
                          type: string
                        type: array
                      parameters:
                        description: 'Parameters is an optional list of kernel module
                          parameters to be provided to modprobe. They should be in
                          the form of key=value and will be separated by spaces in
                          the modprobe command. The resulting loading command will
                          be: `modprobe module_name ${Parameters}`.'
                        items:
                          type: string
                        type: array
                      rawArgs:
                        description: 'If RawArgs are specified, they are passed straight
                          to the modprobe binary; all other properties in this object
                          are ignored. The resulting commands will be: `modprobe ${RawArgs}`.'
                        properties:
                          load:
                            description: Load is an optional list of arguments to
                              be used when loading the kernel module.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          unload:
                            description: Unload is an optional list of arguments to
                              be used when unloading the kernel module.
                            items:
                              type: string
                            minItems: 1
                            type: array
                        type: object
                    required:
                    - moduleName
                    type: object
                  registryTLS:
                    description: RegistryTLS set the TLS configs for accessing the
                      registry of the module-loader's image.
                    properties:
                      insecure:
                        description: If Insecure is true, the operator will be able
                          to access a registry in an insecure (plain HTTP) protocol.
                        type: boolean
                      insecureSkipTLSVerify:
                        description: If InsecureSkipTLSVerify, the operator will accept
                          any certificate provided by the registry.
                        type: boolean
                    type: object
                  sign:
                    description: Sign provides default kmod signing settings
                    properties:
                      certSecret:
                        description: a secret containing the public key used to sign
                          kernel modules for secureboot
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      filesToSign:
                        description: paths inside the image for the kernel modules
                          to sign (if ommited all kmods are signed)
                        items:
                          type: string
                        type: array
                      keySecret:
                        description: a secret containing the private key used to sign
                          kernel modules for secureboot
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      unsignedImage:
                        description: Image to sign, ignored if a Build is present,
                          required otherwise
                        type: string
                      unsignedImageRegistryTLS:
                        description: UnsignedImageRegistryTLS contains settings determining
                          how to access registries of the unsigned image.
                        properties:
                          insecure:
                            description: If Insecure is true, the operator will be
                              able to access a registry in an insecure (plain HTTP)
                              protocol.
                            type: boolean
                          insecureSkipTLSVerify:
                            description: If InsecureSkipTLSVerify, the operator will
                              accept any certificate provided by the registry.
                            type: boolean
                        type: object
                    required:
                    - certSecret
                    - keySecret
                    type: object
                  version:
                    description: Version defines the current version of the kernel
                      module being used Used for upgrading the currently loaded kernel
                      module to a new version
                    type: string
                required:
                - kernelMappings
                - modprobe
                type: object
              imageRepoSecret:
                description: pull secrets used for pull/setting images used by operator
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              selector:
                additionalProperties:
                  type: string
                description: Selector describes on which nodes the GPU Operator should
                  enable the GPU device.
                type: object
              useInTreeDrivers:
                description: if the in-tree driver should be used instead of OOT drivers
                type: boolean
            required:
            - devicePluginImage
            - driversConfig
            - selector
            type: object
          status:
            description: ModuleStatus defines the observed state of Module.
            properties:
              devicePlugin:
                description: DevicePlugin contains the status of the GPU Device Plugin
                  deployment
                properties:
                  availableNumber:
                    description: number of the actually deployed and running pods
                    format: int32
                    type: integer
                  desiredNumber:
                    description: number of the pods that should be deployed for daemonset
                    format: int32
                    type: integer
                  nodesMatchingSelectorNumber:
                    description: number of nodes that are targeted by the module selector
                    format: int32
                    type: integer
                type: object
              driver:
                description: Driver contains the status of the GPU Driver deployment
                properties:
                  availableNumber:
                    description: number of the actually deployed and running pods
                    format: int32
                    type: integer
                  desiredNumber:
                    description: number of the pods that should be deployed for daemonset
                    format: int32
                    type: integer
                  nodesMatchingSelectorNumber:
                    description: number of nodes that are targeted by the module selector
                    format: int32
                    type: integer
                type: object
            required:
            - driver
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
